<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Dev&amp;Ops</title><link>https://andmos.github.io/blog.amosti.net/post/</link><description>Recent content in Posts on Dev&amp;Ops</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 17 Jan 2022 18:16:18 +0000</lastBuildDate><atom:link href="https://andmos.github.io/blog.amosti.net/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Backing up API data to GitHub with Flat-Data</title><link>https://andmos.github.io/blog.amosti.net/backing-up-api-data-to-github-with-flat-data/</link><pubDate>Mon, 17 Jan 2022 18:16:18 +0000</pubDate><guid>https://andmos.github.io/blog.amosti.net/backing-up-api-data-to-github-with-flat-data/</guid><description>For the last 10 years or so I have used Trello as my preferred service to keep track of my reading.
I wrote a blog post about this setup and my technique with regards to reading, which, upon re-reading, I see that both my technique for reading and writing-skills has improve, so that&amp;rsquo;s that.
In 2017 Atlassian acquired Trello, and safe to say, thing are starting to become more &amp;ldquo;enterprisey&amp;rdquo; over there.</description></item><item><title>Deterministic systems with Nix</title><link>https://andmos.github.io/blog.amosti.net/deterministic-systems-with-nix/</link><pubDate>Thu, 16 Dec 2021 18:01:24 +0000</pubDate><guid>https://andmos.github.io/blog.amosti.net/deterministic-systems-with-nix/</guid><description>This is a cross-post of my contribution to this year&amp;rsquo;s advent calendar we do over at Bekk. Hope you like it!
Introduction Setting up reliable environments for our software is tricky. The task has kept developers and sysadmins up at night for decades. Making environments and packages truly reproducible and reliable for more than a few weeks before regression sets in, is surely no easy task. In this post, we&amp;rsquo;ll see how we can set up truly deterministic, reproducible and even ephemeral environments with the help of a clever set of tools called Nix, so we can sleep better, knowing our systems can be installed from literary scratch and be guaranteed the same binary packages down to the lowest dependencies.</description></item><item><title>Containerize FluentMigrator for effortless db migrations</title><link>https://andmos.github.io/blog.amosti.net/containerize-fluentmigrator-for-effortless-db-migrations/</link><pubDate>Sun, 21 Feb 2021 10:50:17 +0000</pubDate><guid>https://andmos.github.io/blog.amosti.net/containerize-fluentmigrator-for-effortless-db-migrations/</guid><description>Continuing the containerization Last year I wrote about how to set up a local reverse proxy with nginx and mkcert via Docker-Compose. Being able to spin up a local, production-like reverse proxy to use while developing is great, but why stop there?
Sooner or later the need for a database to store the applications data will emerge, and with any data structure, the need for change - adding, updating or deleting elements of the structure is needed.</description></item><item><title>Cross post: Take Argo CD for a spin with K3s and k3d</title><link>https://andmos.github.io/blog.amosti.net/cross-post-take-argo-cd-for-a-spin-with-k3s-and-k3d/</link><pubDate>Sun, 20 Dec 2020 10:33:43 +0000</pubDate><guid>https://andmos.github.io/blog.amosti.net/cross-post-take-argo-cd-for-a-spin-with-k3s-and-k3d/</guid><description>For the second year in a row, my current employer Bekk has set out on a ambitious December journey:
Bekk Christmas, 264 tech articles in 24 days, each day of the advent calendar.
One of the categories was thecloud.christmas, so it felt natural to me to contribute here.
So here it it, from the 13th of December, my post about Kubernetes, ArgoCD, K3s and k3d. Enjoy Take Argo CD for a spin with K3s and k3d!</description></item><item><title>Local reverse-proxy with Nginx, mkcert and Docker-Compose</title><link>https://andmos.github.io/blog.amosti.net/local-reverse-proxy-with-nginx-mkcert-and-docker-compose/</link><pubDate>Fri, 10 Apr 2020 09:43:29 +0000</pubDate><guid>https://andmos.github.io/blog.amosti.net/local-reverse-proxy-with-nginx-mkcert-and-docker-compose/</guid><description>Good practices from the Twelve-Factor app When developing modern web application or services, the Twelve-factor app taught us that our services
is completely self-contained and does not rely on runtime injection of a webserver into the execution environment to create a web-facing service. The web app exports HTTP as a service by binding to a port, and listening to requests coming in on that port.
What this means is that our apps written with modern frameworks (like ASP.</description></item><item><title>Automate Docker base image updates with Watchtower</title><link>https://andmos.github.io/blog.amosti.net/automate-docker-base-image-updates-with-watchtower/</link><pubDate>Sun, 03 Nov 2019 08:43:52 +0000</pubDate><guid>https://andmos.github.io/blog.amosti.net/automate-docker-base-image-updates-with-watchtower/</guid><description>If you host some simple hobby services with plain old Docker, chances are high that you have been thinking about how to automate the deployment process. If the services are small enough and you host them on your own servers or VM&amp;rsquo;s, going to the PaaS cloud or introducing Kubernetes with a sophisticated CI/CD pipeline is, in most cases, total overkill.
Why invest more time in setting up the complicated hosting and scheduling platform than it took to write that 500 lines single-container web service?</description></item><item><title>Github Actions and publishing artifacts to Azure Blob Storage</title><link>https://andmos.github.io/blog.amosti.net/github-actions-and-publishing-artifacts-to-azure-blob-storage/</link><pubDate>Thu, 03 Oct 2019 14:59:13 +0000</pubDate><guid>https://andmos.github.io/blog.amosti.net/github-actions-and-publishing-artifacts-to-azure-blob-storage/</guid><description>Intro Github Actions is a welcomed edition to the (still) growing world of CI/CD tools. Since Actions is Github&amp;rsquo;s own tool, it integrates more closely to your repo and the Github Workflow, with actions to automate tasks around issues, pull-requests, releases etc. Writing a task that regularly, say, check issues and mark them as stalled if it hasn&amp;rsquo;t been any activity for some time has, would mean leveraging the Github API when running in other tools, while abstractions for these kinds of integrations are present directly in Github Actions.</description></item><item><title>Running GBFS bikeshare functions with OpenFaaS for fun and profit</title><link>https://andmos.github.io/blog.amosti.net/running-gbfs-bikeshare-functions-with-openfaas-for-fun-and-profit/</link><pubDate>Tue, 04 Jun 2019 18:22:59 +0000</pubDate><guid>https://andmos.github.io/blog.amosti.net/running-gbfs-bikeshare-functions-with-openfaas-for-fun-and-profit/</guid><description>Intro Micro-mobility has gotten a lot of hype over the last couple of years. In many cities all over the world rentable city bikes, cargo bikes and electrical scooters has popped out and seriously changed the way people move, and it doesn&amp;rsquo;t look like you can spell &amp;ldquo;smart city&amp;rdquo; without micro-mobility. The consulting company McKinsey is estimating that the value of the micro-mobility market will reach a value of $200 billion to $300 billion in the United States in 2030.</description></item><item><title>Code Coverage for dotnet core with Coverlet, multi-stage Dockerfile and codecov.io</title><link>https://andmos.github.io/blog.amosti.net/code-coverage-for-dotnet-core-with-coverlet-multistage-dockerfile-and-codecov-io/</link><pubDate>Sun, 26 May 2019 11:38:51 +0000</pubDate><guid>https://andmos.github.io/blog.amosti.net/code-coverage-for-dotnet-core-with-coverlet-multistage-dockerfile-and-codecov-io/</guid><description>Enter Coverlet The one thing I missed when moving away from full-framework and Visual Studio to VSCode and dotnet core, was simple code coverage.
Given the easy tooling dotnet provides, with dotnet build, dotnet test and dotnet publish, I looked for something that integrated nicely with these commands without adding to much complexity to the code project itself. After som googling, I stumbled over Scott Hanselman&amp;rsquo;s blogpost about a cool little project called Coverlet.</description></item><item><title>Ensure consistent Markdown style with Markdownlint</title><link>https://andmos.github.io/blog.amosti.net/ensure-consistent-markdown-style-with-markdownlint/</link><pubDate>Sat, 05 Jan 2019 15:04:00 +0000</pubDate><guid>https://andmos.github.io/blog.amosti.net/ensure-consistent-markdown-style-with-markdownlint/</guid><description>Markdown is great. It&amp;rsquo;s easy and flexible, and provides a good markup language even non-technical people can understand and enjoy. But, that flexibility and customizability can come at a cost. Document buildup can be done in many ways, and it can be hard to ensure consitency when working with multiple documents and contributors.
I like to think of markup languages as code, and most code deserves a good style guide. Markdownlint is a good alternative.</description></item><item><title>Trondheim Developer Conference 2018</title><link>https://andmos.github.io/blog.amosti.net/trondheim-developer-conference-2018/</link><pubDate>Thu, 08 Nov 2018 11:02:13 +0000</pubDate><guid>https://andmos.github.io/blog.amosti.net/trondheim-developer-conference-2018/</guid><description>Three years since my last trip to TDC, I again got a talk approved. This time I submitted the talk Ansible: Configuration Management for Windows og Linux i skj√∏nn forening (translates to something like Ansible: Configuration Management for Windows and Linux in great harmony)
As readers of my blog know, I use Ansible a lot when working on both Linux and Windows, so that topic should not come as a suprise.</description></item><item><title>Regression test Ansible Playbooks with Packer</title><link>https://andmos.github.io/blog.amosti.net/regression-test-ansible-playbooks-with-packer/</link><pubDate>Fri, 03 Aug 2018 09:37:08 +0000</pubDate><guid>https://andmos.github.io/blog.amosti.net/regression-test-ansible-playbooks-with-packer/</guid><description>Some people still live in a pre-Kubernetes world, installing infrastructure components directly on VMs. Some still hold on to the old and boring, but still going, vmware cluster from 5 - 10 years ago. And hey, there is nothing wrong with that.
We still have this setup at work, but thanks to Ansible, it feels like a private cloud at the IaaS level. When a development, QA or production environment is created, the CI system runs nightly provisioning against these servers.</description></item><item><title>How the "sharing economy" fits into my everyday life</title><link>https://andmos.github.io/blog.amosti.net/how-the-sharing-economy-fits-in-to-my-life/</link><pubDate>Mon, 23 Jul 2018 18:04:49 +0000</pubDate><guid>https://andmos.github.io/blog.amosti.net/how-the-sharing-economy-fits-in-to-my-life/</guid><description>It&amp;rsquo;s been some time since my last post, so let&amp;rsquo;s shake it off with a rare non-technical one.
Sharing whatnow? The term &amp;ldquo;sharing economy&amp;rdquo;, or peer-to-peer services if you like, has been hyped up over the last couple of years. Companies like Uber, Airbnb, Lyft and so on have been both praised and villainize for shaking up old, traditional industries. I will not go in to the political and ethnical debate about this &amp;ldquo;brave new world&amp;rdquo; transition that this economy is bringing in this post - that is content for another day - but as we say in social democratic Norway: Hey, regulate and pay them taxes, yo!</description></item><item><title>Container Structure Tests</title><link>https://andmos.github.io/blog.amosti.net/container-structure-tests/</link><pubDate>Mon, 05 Mar 2018 17:15:47 +0000</pubDate><guid>https://andmos.github.io/blog.amosti.net/container-structure-tests/</guid><description>A cool new project from Google Cloud Platform is Container Structure Tests. When working with containers, running tasks like unit tests as a part of the the container build stage is smart - and with Docker multi-stage builds available there is no excuse not to.
Including tests, the Dockerfile instructions itself will throw an exitcode if some of the preconditions change.
Let&amp;rsquo;s say we have the step
COPY ReadingList.exe.config /ReadingList/bin/Release/ReadingList.exe.config and it gets tampered with,</description></item><item><title>Bootstrapping Octopus Deploy SSH targets with dotnet-script</title><link>https://andmos.github.io/blog.amosti.net/bootstrapping-octopus-deploy-ssh-targets-with-dotnet-script/</link><pubDate>Wed, 03 Jan 2018 18:43:46 +0000</pubDate><guid>https://andmos.github.io/blog.amosti.net/bootstrapping-octopus-deploy-ssh-targets-with-dotnet-script/</guid><description>Those who use Octopus Deploy probably know about Calamari. In short, Calamari is a console app that functions as the deployment engine on the Octopus Deploy targets machines.
Calamari is the app that makes sure your NuGet packages, Powershell, Bash, F# scripts etc. Is being executed on the target machine. For Windows the Octopus Tentacle is used by the main Octopus Server to communicate with the deployment targets, eventually installing Calamari on the first deploy.</description></item><item><title>Using Docker for executing ad-hoc scripts and cron-like jobs</title><link>https://andmos.github.io/blog.amosti.net/using-docker-for-executing-ad-hoc-scripts-and-cron-like-jobs/</link><pubDate>Mon, 13 Nov 2017 18:27:55 +0000</pubDate><guid>https://andmos.github.io/blog.amosti.net/using-docker-for-executing-ad-hoc-scripts-and-cron-like-jobs/</guid><description>Intro People use Docker to package applications and infrastructure dependencies for easy shipment - and it shines bright while doing it. A less talked about usecase for Docker is executing simple ad-hoc scripts and cron-type jobs, like nightly jobs on a build server. Since Docker isolates processes, we can be much more free to experiment with different languages and runtimes not only in our applications, but also our scripts without having to think about provisioning software to the target servers.</description></item><item><title>Associate file endings with languages in Atom</title><link>https://andmos.github.io/blog.amosti.net/associate-file-endings-with-languages-in-atom/</link><pubDate>Sat, 01 Jul 2017 05:14:06 +0000</pubDate><guid>https://andmos.github.io/blog.amosti.net/associate-file-endings-with-languages-in-atom/</guid><description>A short tip if you use Atom as your preferred editor: how to associate file endings with a specific language pack for syntax highlighting. Should be easy right? Well, I actually had to do some googling on this.
When working with my Ansible codebase, I like to use Atom. As with most languages out there, the community has created a language pack for it to give you some syntax highlighting goodness.</description></item><item><title>How I broke an API (and how you can do it too!)</title><link>https://andmos.github.io/blog.amosti.net/how-i-broke-an-api-and-how-you-can-do-it-too/</link><pubDate>Thu, 08 Jun 2017 16:29:00 +0000</pubDate><guid>https://andmos.github.io/blog.amosti.net/how-i-broke-an-api-and-how-you-can-do-it-too/</guid><description>Disclaimer: The content of this post is not nearly as dramatic as the title will have it, and for a lot of developers it will sound obvious. Based on code I have seen I nonetheless think it can learn a lot of people a valid lesson as well, and hopefully help other avoid the mistakes laziness can lead to.
In november last year I wrote about Stratos, a simple web API based on Nancy with the sole purpose of listing out installed Chocolatey packages on a server.</description></item><item><title>My Favorite Podcasts - 2017 edition</title><link>https://andmos.github.io/blog.amosti.net/my-favorite-podcasts-2017-edition-2/</link><pubDate>Fri, 14 Apr 2017 16:27:00 +0000</pubDate><guid>https://andmos.github.io/blog.amosti.net/my-favorite-podcasts-2017-edition-2/</guid><description>I am a huge fan of podcasts. They are a great way to learn about new subjects, both from the tech world, science and academia. Here is a list of some of my favorite podcasts so far in 2017.
Tech and Design Arrested DevOps Probably the leading podcast about the DevOps movement. Matt Stratton (Chef), Trevor Hess (10th Magnitude) and Bridget Kromhout (Pivotal) guides the listener through the ever-changing world of DevOps - including tools, patterns and practices.</description></item><item><title>Docker Garbage Collection version 1.13.0 update!</title><link>https://andmos.github.io/blog.amosti.net/docker-garbage-collection-version-1-13-0-update/</link><pubDate>Wed, 01 Mar 2017 17:24:00 +0000</pubDate><guid>https://andmos.github.io/blog.amosti.net/docker-garbage-collection-version-1-13-0-update/</guid><description>Back in 2015 I blogged about how the missing garbage collection in Docker could seriously fill up the drive on the computer you develop Docker Images on. This was a serioust problem, and the solution (then) was the Spotify docker-gc image image. Now, with the 1.13 release we finally got support for just this in the docker-client: docker system prune.
docker system prune will remove all unused data - that is hanging images (images not used by any existing container) as well as old volumes and networks.</description></item><item><title>Rolling out web services with Topshelf, Chocolatey and Ansible</title><link>https://andmos.github.io/blog.amosti.net/rolling-out-web-services-with-topshelf-chocolatey-and-ansible/</link><pubDate>Sun, 20 Nov 2016 15:35:37 +0000</pubDate><guid>https://andmos.github.io/blog.amosti.net/rolling-out-web-services-with-topshelf-chocolatey-and-ansible/</guid><description>I have been doing a lot of automation on the Windows platform at work lately. That sentence would have been associated with pain some years ago - but things have changed. Ansible is nothing less than the perfect provisioning tool for both Linux and Windows, providing (in my opinion) the best level of abstraction when managing systems and state. A lot of modules are there also for Windows, so you have to put minimal of effort in the details of the provisioning steps, making it easy for people who are not developers or scripting guys to catch the gist of it.</description></item><item><title>Spawning TFS2015 Build Agents with Docker</title><link>https://andmos.github.io/blog.amosti.net/spawning-tfs2015-build-agents-with-docker/</link><pubDate>Sat, 24 Sep 2016 10:48:56 +0000</pubDate><guid>https://andmos.github.io/blog.amosti.net/spawning-tfs2015-build-agents-with-docker/</guid><description>The Microsoft Open Source train keeps rolling fast forward with more and more projects popping up on GitHub. When we upgraded to TFS2015 late last year, the support for Linux build agents was so-so. A couple of weeks ago I decided to check in again.
To my delight I discovered that the &amp;ldquo;old&amp;rdquo; build agent had been depricated and the new one has been implementet using dotnet core. That means cross-platform awesomeness!</description></item><item><title>DockerCon 2016: Docker nails iterative open source development</title><link>https://andmos.github.io/blog.amosti.net/dockercon-2016-docker-nails-iterative-open-source-development/</link><pubDate>Tue, 21 Jun 2016 08:52:47 +0000</pubDate><guid>https://andmos.github.io/blog.amosti.net/dockercon-2016-docker-nails-iterative-open-source-development/</guid><description>Yesterday DockerCon 2016 kicked off from rainy Seattle with a brilliant keynote lead by CEO Ben Golub and CTO Solomon Hykes. Hykes talked about how Docker&amp;rsquo;s goal is to make tools of mass innovation, to remove as much friction as possible from the development workflow. One such example is Docker for Mac and Windows. Anand Prasad came on stage as an &amp;ldquo;First day on the job&amp;rdquo; developer to demonstrate how Docker for Mac could help him get up and running, debugging and committing code - 10 minutes in on the new job.</description></item><item><title>We created a tech blog!</title><link>https://andmos.github.io/blog.amosti.net/we-created-a-tech-blog/</link><pubDate>Thu, 24 Mar 2016 11:00:06 +0000</pubDate><guid>https://andmos.github.io/blog.amosti.net/we-created-a-tech-blog/</guid><description>At DIPS Trondheim, we like to think about new ways to connect with developers and giving back to the community. A lot of us do Open Source development and attend meetups on a regular basis. We talk at conferences and universities. As geeks we also read blogs. A lot of blogs. Being Norwegian developers, we found that the amount of people and companies in the tech scene actually blogging in Norwegian was rather slim, so we decided to do something about it.</description></item><item><title>Dumbing down the build server</title><link>https://andmos.github.io/blog.amosti.net/dumbing-down-the-build-server/</link><pubDate>Sat, 02 Jan 2016 11:32:42 +0000</pubDate><guid>https://andmos.github.io/blog.amosti.net/dumbing-down-the-build-server/</guid><description>Motivation A common mistake I see many do (yes, i call it mistake ) is a build system too tightly linked with the build server they end up choosing. We made that mistake ourself. Being a typical .NET shop, we started out with Microsoft Team Foundation server back in 2007. Building with TFS in those days relied heavily on workflow scripts and build templates that had to be compiled and could only be run on the build server.</description></item><item><title>Trondheim Developer Conference 2015</title><link>https://andmos.github.io/blog.amosti.net/trondheim-developer-conference/</link><pubDate>Sat, 31 Oct 2015 15:01:59 +0000</pubDate><guid>https://andmos.github.io/blog.amosti.net/trondheim-developer-conference/</guid><description>This year I had the pleasure of being one of the talkers at the fourth annual TDC in Trondhiem. The lineup included big international tech-names like Scott Hanselman, Sahil Malik, Seb Lee-Delisle and Scott Allen, and I had a lot of fun making my debut as a conference speaker along side these people.
The talk i brought was Simple crossplatform REST-Service with .NET, Vagrant and Docker, a walkthrough on how to make crossplatform server components in .</description></item><item><title>Fun with Travis CI</title><link>https://andmos.github.io/blog.amosti.net/fun-with-travis-ci/</link><pubDate>Tue, 20 Oct 2015 18:23:32 +0000</pubDate><guid>https://andmos.github.io/blog.amosti.net/fun-with-travis-ci/</guid><description>Ok, I need to swallow my own words on this one. Yesterday I stated the following on twitter:
I was thinking of writing a blogpost about building with @travisci, but it is so easy to use that I don&amp;#39;t see the point. #greatProject #CI
&amp;mdash; Andreas Mosti (@amostii) October 19, 2015 So, yeah.
Recently I have been playing a lot with Travis CI for building my open source projects directly from GitHub.</description></item><item><title>Build and publish AsciiDoc with Docker and nginx</title><link>https://andmos.github.io/blog.amosti.net/build-and-publish-asciidoc-with-docker-and-nginx/</link><pubDate>Thu, 03 Sep 2015 17:02:39 +0000</pubDate><guid>https://andmos.github.io/blog.amosti.net/build-and-publish-asciidoc-with-docker-and-nginx/</guid><description>One of the teams at work is piloting the usage of AsciiDoc for documentation of their product. AsciiDoc is a markup-format just like Gruber&amp;rsquo;s Markdown, but is more advanced and offers more possibilities. Since the documentation is located alongside the source code in Git (as it should be!) I created a simple build step for easy build and deploy of the documentation with my favorite tool, Docker with public images directly from the Docker Hub.</description></item><item><title>Managing NuGet dependencies with Paket</title><link>https://andmos.github.io/blog.amosti.net/managing-nuget-dependencies-with-paket/</link><pubDate>Fri, 07 Aug 2015 14:54:46 +0000</pubDate><guid>https://andmos.github.io/blog.amosti.net/managing-nuget-dependencies-with-paket/</guid><description>Since we mainly write .NET code at work, the only real choice for packing dependencies and applications is NuGet and Chocolatey, everything stored in different feeds on the excellent ProGet server. For CI we build our code with TFS and Team City using some hand-made build scripts written in scriptcs, while deployment is done with good old Octopus Deploy.
All this works perfectly in our in-house environments, everything is just a choco install away.</description></item><item><title>Docker Garbage Collection</title><link>https://andmos.github.io/blog.amosti.net/docker-garbage-collection/</link><pubDate>Mon, 03 Aug 2015 17:00:45 +0000</pubDate><guid>https://andmos.github.io/blog.amosti.net/docker-garbage-collection/</guid><description>A mayor issue you might have run into when working on Docker-images is actual disk space. Over time, images and containers can consume a great deal of your precious drive, often when you are developing the actual image and having a test-run after each ADD or RUN block. The containers then tend to multiply as frequently as rabbits.
To solve this problem and the lack of Docker &amp;ldquo;garbage collection&amp;rdquo;, the good guys over at Spotify has created the docker-gc project on GitHub.</description></item><item><title>On Development Managers</title><link>https://andmos.github.io/blog.amosti.net/on-development-managers/</link><pubDate>Fri, 17 Jul 2015 10:50:36 +0000</pubDate><guid>https://andmos.github.io/blog.amosti.net/on-development-managers/</guid><description>A couple of days ago ex-GitHub employee and brilliant tech-speaker Zach Holman tweeted the following:
There are a lot of ways to become a bad manager, but tapping me on my shoulder when I‚Äôm building shit is probably the most heinous.
&amp;mdash; Zach Holman (@holman) July 12, 2015 This statement hits the problem with bad managers spot on. Many companies struggle with this, managers who have to check in on the employees constantly - thus preventing them from being productive.</description></item><item><title>Run Github's Atom editor in Docker (Aka. Containers on the desktop)</title><link>https://andmos.github.io/blog.amosti.net/untitlrun-githubs-atom-editor-in-docker-aka-containers-on-the-desktoped/</link><pubDate>Sat, 23 May 2015 13:09:31 +0000</pubDate><guid>https://andmos.github.io/blog.amosti.net/untitlrun-githubs-atom-editor-in-docker-aka-containers-on-the-desktoped/</guid><description>By now everybody loves Docker. I mean, what is there not to love? Never have it been easier to program, pack and deploy you&amp;rsquo;re applications and getting out of dependency hell while keeping them isolated from each other. Docker has solved the whole &amp;ldquo;download and install this on the server, but remember to have the right version of Java (no, not that one!) and Tomcat (7, not 8)&amp;rdquo; - problem. All servers are happy.</description></item><item><title>Easy way to upgrade Docker</title><link>https://andmos.github.io/blog.amosti.net/easy-way-to-upgrade-docker/</link><pubDate>Mon, 04 May 2015 18:20:21 +0000</pubDate><guid>https://andmos.github.io/blog.amosti.net/easy-way-to-upgrade-docker/</guid><description>If you use a system with a strickt package repository (like Debian stable, CentOS, RedHat etc.) chances are new releases of Docker won&amp;rsquo;t be pushed right after release. A sweet trick I use on my CentOS machines is to just wget down the new binary like so:
service docker stop wget https://get.docker.com/builds/Linux/x86_64/docker-latest -O /usr/bin/docker service docker start Since Docker has released with quite a steady pace (and I like latest and greatest) I have eaven made an alias for the job -</description></item><item><title>Updating a SolrCloud schema in a live enviroment</title><link>https://andmos.github.io/blog.amosti.net/updating-a-solrcloud-schema-in-a-live-enviroment/</link><pubDate>Sat, 25 Apr 2015 10:52:10 +0000</pubDate><guid>https://andmos.github.io/blog.amosti.net/updating-a-solrcloud-schema-in-a-live-enviroment/</guid><description>I can guarantee this will happen to you at some point: You find out that you need to add some more feilds in a Solr schema becouse you want to index some more data from you&amp;rsquo;re documents. Does that mean taking down the live nodes, changing the schema and then start them up again? Thankfully, no. With the help of Zookeeper and the Solr schema REST API we can do this live without any pain.</description></item><item><title>Zookeeper-aware application server</title><link>https://andmos.github.io/blog.amosti.net/zookeeper-aware-application-server/</link><pubDate>Mon, 13 Apr 2015 18:51:36 +0000</pubDate><guid>https://andmos.github.io/blog.amosti.net/zookeeper-aware-application-server/</guid><description>###The situation At work we use Apache Solr from our application server to index and offer search in documents. A LOT of documents. The largest customer of our system has as much as 130 million documents, and the amount keeps growing exponentially. With this in mind, we knew early that we had to shard up and cluster the Solr-collection, this meant using SolrCloud. SolrCloud uses Apache ZooKeeper to keep track of config files, live nodes, coordination etc.</description></item><item><title>How I Read</title><link>https://andmos.github.io/blog.amosti.net/how-i-read/</link><pubDate>Mon, 16 Mar 2015 19:52:47 +0000</pubDate><guid>https://andmos.github.io/blog.amosti.net/how-i-read/</guid><description>During my last year of University College, I rediscovered my childhood joy of reading. At the time I was working on my bachelor‚Äôs degree (an app for the company I now work for) in a structured way from morning to afternoon, so my evenings were open for the first time in years. At one point, I had watched all seasons of The Wire, all seasons of House MD and Breaking Bad had come to its conclusion.</description></item><item><title>Build, test and deploy .NET apps with Vagrant and Docker</title><link>https://andmos.github.io/blog.amosti.net/build-test-and-deploy-net-apps-with-vagrant-and-docker/</link><pubDate>Tue, 03 Mar 2015 19:26:57 +0000</pubDate><guid>https://andmos.github.io/blog.amosti.net/build-test-and-deploy-net-apps-with-vagrant-and-docker/</guid><description>On a resent project at work we build a cross-platform chat-application with Xamarin and SignalR. The SignalR-hub was to find it&amp;rsquo;s home on a Linux-server, given ASP.NETs new found love for other platforms than Windows and IIS. We had limited time and the back-end guys were developing the hub in Visual Studio. To help them make sure the code they wrote would be Mono-compatible (and easy to deploy for testing), I turned to my two favorite pieces of open source technology: Vagrant and Docker.</description></item><item><title>Self-hosted HTTP service in C# with Nancy and TopShelf</title><link>https://andmos.github.io/blog.amosti.net/self-hosted-http-service-in-c-with-nancy-and-topshelf/</link><pubDate>Tue, 03 Mar 2015 19:21:09 +0000</pubDate><guid>https://andmos.github.io/blog.amosti.net/self-hosted-http-service-in-c-with-nancy-and-topshelf/</guid><description>I found myself in need of a standalone, self-hosted HTTP Service for a REST-backend at work the other day. I like my services to be flexible and easy to deploy with a low footprint. Here&amp;rsquo;s the catch: At work we write in .Net and I truly hate IIS. I kinda like C#, but I don&amp;rsquo;t want my webservices to be tightly locked onto the platform-specific overhead hell that is IIS. Thanks to OWIN, Nancy and TopShelf it easy to write a self-hosted HTTP service (Ruby or Node.</description></item></channel></rss>